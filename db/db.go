package db

import (
	"database/sql"
	_ "github.com/lib/pq"
	"log"
	"os"
)

type Database struct {
	db *sql.DB
}



func New() *Database {
	connStr := "user=" + os.Getenv("POSTGRES_USER") + " password=" + os.Getenv("POSTGRES_PASSWORD")
	connStr += " dbname=" + os.Getenv("POSTGRES_DB")
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal(err)
	}
	return &Database{
		db,
	}
}

func (d Database) Initialize(timezones []string){



}

func (d Database) createTUsers(){
	err := d.db.Ping()
	if err != nil{
		log.Fatal(err)
	}
	// Создание таблиц
	// Таблица users
	query := "drop table if exists users;"
	_ , err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
	query = `create table users(
  				id integer generated by default as identity PRIMARY KEY,
  				timestamp timestamp default current_timestamp
			 );`
	_, err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
}

func (d Database) createTTimezones(timezones []string){
	err := d.db.Ping()
	if err != nil{
		log.Fatal(err)
	}
	// Таблица timezones
	query := "drop table if exists timezones;"
	_ , err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
	query = `create table timezones(
  				id integer generated by default as identity PRIMARY KEY,
  				timezone VARCHAR(30) NOT NULL UNIQUE
			 );`
	_, err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
	// инициализация timezones
	query = "insert into timezones(id, timezones) values (?, ?);"
	for i := 0; i < len(timezones); i++ {
		_, err = d.db.Exec(query, i, timezones[i])
	}
}

func (d Database) createTUserData(){
	err := d.db.Ping()
	if err != nil{
		log.Fatal(err)
	}
	// таблица user_data
	query := "drop table if exists user_data;"
	_ , err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
	query = `create table user_data(
  				user_id integer,
  				timezone_id integer,
  				timestamp timestamp default current_timestamp,
 				PRIMARY KEY(user_id, timezone_id),
  				FOREIGN KEY (user_id) references users(id),
  				FOREIGN KEY (timezone_id) REFERENCES timezones(id)
			  );`
	_, err = d.db.Exec(query)
	if err != nil{
		log.Fatal(err)
	}
}

func (d Database) createUser(id int){
	
}




